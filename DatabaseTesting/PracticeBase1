Create Database: CREATE DATABASE SampleDB;
                  USE SampleDB;
Create Table:    CREATE TABLE Employees (
                  EmployeeID INT AUTO_INCREMENT PRIMARY KEY,
                  FirstName VARCHAR(50),
                  LastName VARCHAR(50),
                  Department VARCHAR(50),
                  Salary DECIMAL(10, 2),
                  JoiningDate DATE
                      );
Insert Data: INSERT INTO Employees (FirstName, LastName, Department, Salary, JoiningDate)
               VALUES
               ('John', 'Doe', 'HR', 50000, '2022-01-15'),
               ('Jane', 'Smith', 'IT', 60000, '2021-03-20'),
               ('Mike', 'Brown', 'Finance', 55000, '2023-05-10');
Update Data:  UPDATE Employees
               SET Salary = 70000
               WHERE Department = 'IT';
Delete Data:  DELETE FROM Employees
               WHERE FirstName = 'Mike';
Truncate Data: TRUNCATE TABLE Employees;
Drop-Table: DROP TABLE Employees;
Alter Data: ALTER TABLE Employees
             ADD Email VARCHAR(100);
Select To View Table: SELECT * FROM Employees;
Where:  Use To filter The Record.
         SELECT * FROM Employees
         WHERE Department = 'IT';
And , Or , Not:  -- AND
                   SELECT * FROM Employees
                   WHERE Department = 'IT' AND Salary > 50000;

                   -- OR
                   SELECT * FROM Employees
                  WHERE Department = 'HR' OR Department = 'Finance';

                   -- NOT
                   SELECT * FROM Employees
                   WHERE NOT Department = 'HR';
Null values:     SELECT * FROM Employees
                  WHERE Email IS NULL;

                 UPDATE Employees
                 SET Email = NULL
                 WHERE EmployeeID = 1;
Aggregation (MIN,MAX,SUM,AVG,COUNT): SELECT 
                                     MIN(Salary) AS MinSalary,
                                     MAX(Salary) AS MaxSalary,
                                     SUM(Salary) AS TotalSalary,
                                     AVG(Salary) AS AvgSalary,
                                     COUNT(*) AS TotalEmployees
                                     FROM Employees;
Having : WHERE keyword cannot be used with aggregate functions. 
          SELECT Department, AVG(Salary) AS AvgSalary
          FROM Employees
          GROUP BY Department
          HAVING AVG(Salary) > 55000;
Group By :  groups rows that have the same values into summary rows
            SELECT Department, COUNT(*) AS EmployeeCount
            FROM Employees
            GROUP BY Department;
Order By : Use To sort The Table in ASC|DSC.
           SELECT * FROM Employees
           ORDER BY Salary DESC;
           -----------------------------------------------------------------------------------------------
Joins: A JOIN clause is used to combine rows from two or more tables.
Inner Joins: The INNER JOIN keyword selects records that have matching values in both tables.
CREATE TABLE Departments (
    DepartmentID INT AUTO_INCREMENT PRIMARY KEY,
    DepartmentName VARCHAR(50)
);

INSERT INTO Departments (DepartmentName) VALUES ('HR'), ('IT'), ('Finance');

SELECT e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName
FROM Employees e
INNER JOIN Departments d ON e.Department = d.DepartmentName;
-----------------------------------------------------------------------------------------------------------
Left Joins :
SELECT e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName
FROM Employees e
LEFT JOIN Departments d ON e.Department = d.DepartmentName;
-------------------------------------------------------------------------------------------------------------
Right Joins :
SELECT e.EmployeeID, e.FirstName, e.LastName, d.DepartmentName
FROM Employees e
RIGHT JOIN Departments d ON e.Department = d.DepartmentName;
---------------------------------------------------------------------------------------------------------------
Cross Joins :
SELECT e.FirstName, d.DepartmentName
FROM Employees e
CROSS JOIN Departments d;
---------------------------------------------------------------------------------------------------------------
Self Joins :
SELECT e1.FirstName AS Employee1, e2.FirstName AS Employee2
FROM Employees e1, Employees e2
WHERE e1.Department = e2.Department AND e1.EmployeeID <> e2.EmployeeID;
-----------------------------------------------------------------------------------------------------------------
Union :
SELECT FirstName, Department FROM Employees
UNION
SELECT DepartmentName AS FirstName, DepartmentName AS Department FROM Departments;
------------------------------------------------------------------------------------------------------------
Aliases : Use aliases to simplify table names, especially when working with multiple tables or joins.
ex1:Column Alias
SELECT 
    FirstName AS First_Name, 
    LastName AS Last_Name, 
    Salary AS Monthly_Salary
FROM Employees;
ex2:Table Alias 
SELECT e.FirstName, e.LastName, d.DepartmentName
FROM Employees e
INNER JOIN Departments d ON e.Department = d.DepartmentName;
ex3: Combined Example
Use both column and table aliases together.
SELECT 
    e.FirstName AS Employee_First_Name, 
    e.LastName AS Employee_Last_Name, 
    d.DepartmentName AS Dept_Name
FROM Employees e
LEFT JOIN Departments d ON e.Department = d.DepartmentName;

